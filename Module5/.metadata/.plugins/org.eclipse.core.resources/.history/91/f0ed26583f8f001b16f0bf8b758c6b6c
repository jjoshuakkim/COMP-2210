import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.SortedSet;
import java.util.TreeSet;

public class GameEngine implements WordSearchGame 
{
	private TreeSet<String> tree; 
	private String[][] board; 
	private static final int MAX_NEIGHBORS = 8;
	private int row;
	private int column;
	private boolean[][] visited; 
	private ArrayList<Integer> path; 
	private String collected; 
	private SortedSet<String> allWords;
	private ArrayList<Position> direction; 
   
	public GameEngine() 
	{
		board = new String[4][4];
		board[0][0] = "E"; 
		board[0][1] = "E"; 
		board[0][2] = "C"; 
		board[0][3] = "A"; 
		board[1][0] = "A"; 
		board[1][1] = "L"; 
		board[1][2] = "E"; 
      	board[1][3] = "P"; 
      	board[2][0] = "H"; 
      	board[2][1] = "N"; 
      	board[2][2] = "B"; 
      	board[2][3] = "O"; 
      	board[3][0] = "Q"; 
      	board[3][1] = "T"; 
      	board[3][2] = "T"; 
      	board[3][3] = "Y";    
      	row = board.length;
      	column = board[0].length;
      	allUnvisited();
   }
       
   public void loadLexicon(String fileName) 
   {
	   tree = new TreeSet<String>(); 
	   if (fileName == null) 
	   {
		   throw new IllegalArgumentException();
	   }
	   
	   try 
	   {
		   Scanner scan = new Scanner(new BufferedReader(new FileReader(new File(fileName))));
		   while (scan.hasNext()) 
		   {
			   tree.add(scan.next().toUpperCase());
			   scan.nextLine();
		   }
	   }
      
	   catch (java.io.FileNotFoundException e) 
	   {
		   throw new IllegalArgumentException();
	   } 
   }
   
   public void setBoard(String[] letterArray) 
   {
	   if (letterArray == null) 
	   {
		   throw new IllegalArgumentException();
	   }
	   
	   int num = (int) Math.sqrt(letterArray.length);
	   
	   if ((num * num) != letterArray.length) 
	   {
		   throw new IllegalArgumentException();
	   }
       
	   else
	   {
		   board = new String[num][num];
		   int count = 0;
		   for (int i = 0; i < num; i++) 
		   {
			   for (int j = 0; j < num; j++) 
			   {
				   board[i][j] = letterArray[count];
				   count++;
			   }
		   }
		   allUnvisited();
	   }
   }
   
   public String getBoard() 
   {
	  return Arrays.deepToString(board);
   }

   public SortedSet<String> getAllScorableWords(int minimumWordLength) 
   {
	   if (minimumWordLength < 1) 
	   {
		   throw new IllegalArgumentException();
	   }
	   if (tree == null) 
	   {
		   throw new IllegalStateException();
	   }
	   direction = new ArrayList<Position>();
	   allWords = new TreeSet<String>();
	   collected = "";
	   for (int i = 0; i < column; i++) 
	   {
		   for (int j = 0; j < row; j ++) 
		   {
			   collected = board[i][j];
			   if (isValidWord(collected) && collected.length() >= minimumWordLength) 
			   {
				   allWords.add(collected);
			   }
			   
			   if (isValidPrefix(collected)) 
			   {
				   Position temp = new Position(i,j);
				   direction.add(temp);
				   dfsForAllWords(i, j, minimumWordLength); 
				   direction.remove(temp);
			   }
		   }
      }
      return allWords;
   }
   
   private void dfsForAllWords(int x, int y, int min) 
   {
	   Position start = new Position(x, y);
	   allUnvisited();
	   pathVisited();
	   for (Position p : start.neighbors()) 
	   {
		   if (!isVisited(p)) 
		   {
			   visit(p);
			   if (isValidPrefix(collected + board[p.x][p.y])) 
			   {
				   collected += board[p.x][p.y];
				   direction.add(p);
				   if (isValidWord(collected) && collected.length() >= min) 
				   {
					   allWords.add(collected);
				   }
               
				   dfsForAllWords(p.x, p.y, min);
				   direction.remove(p);
				   int endIndex = collected.length() - board[p.x][p.y].length();
				   collected = collected.substring(0, endIndex);
			   }
            }
        }
      allUnvisited();
      pathVisited(); 
   }
   
   public int getScoreForWords(SortedSet<String> words, int minimumWordLength) 
	{
		if (minimumWordLength < 1)
		{
			throw new IllegalArgumentException();
		}
		
		if (tree == null)
		{
			throw new IllegalStateException();
		}
		
		int score = 0;
		Iterator<String> itr = words.iterator();
		while (itr.hasNext())
		{
			String word = itr.next();
			if (isValidWord(word) && word.length() == minimumWordLength)
			{
				score++;
			}
			
			else if (word.length() > minimumWordLength)
			{
				score = 1 + (word.length() - minimumWordLength);
			}
		}
		
		return score;
	}
   
   public boolean isValidWord(String wordToCheck) 
   {
      if (tree == null) 
      {
         throw new IllegalStateException();
      }
      
      if (wordToCheck == null) 
      {
         throw new IllegalArgumentException();
      }
      
      return tree.contains(wordToCheck.toUpperCase());
   }
   
   public boolean isValidPrefix(String prefixToCheck) 
   {
	   if (tree == null) 
	   {
		   throw new IllegalStateException();
	   }
	   
	   if (prefixToCheck == null) 
	   {
		   throw new IllegalArgumentException();
	   }
	   
	   String s = tree.ceiling(prefixToCheck.toUpperCase());
	   if (s != null) 
	   {
		   return s.startsWith(prefixToCheck);
	   }
	   
	   return false;
   }
      
   public List<Integer> isOnBoard(String wordToCheck) 
   {
	   if (wordToCheck == null) 
	   {
		   throw new IllegalArgumentException();
	   }
      
	   if (tree == null)   
	   {
		   throw new IllegalStateException();
	   }
      
	   direction = new ArrayList<Position>();
	   wordToCheck = wordToCheck.toUpperCase();
	   collected = "";
	   path = new ArrayList<Integer>();
	   for (int i = 0; i < column; i++) 
	   {
		   for (int j = 0; j < row; j ++) 
		   {
			   if (wordToCheck.equals(board[i][j])) 
			   {
				   path.add(i * row + j);
				   return path;
			   }
			   if (wordToCheck.startsWith(board[i][j])) 
			   {
				   Position pos = new Position(i, j);
				   direction.add(pos);
				   collected = board[i][j];
				   dfsForOnBoard(i, j, wordToCheck);
				   if (!wordToCheck.equals(collected)) 
				   {
					   direction.remove(pos);
				   }
				   else 
				   {
					   for (Position p: direction) 
					   {
						   path.add((p.x * row) + p.y);
					   } 
					   return path;
				   }
			   }
		   }
	   }
	   return path;
   }
   
   private void dfsForOnBoard(int x, int y, String wordToCheck) 
   {
	   Position start = new Position(x, y);
	   allUnvisited();
	   pathVisited();
	   for (Position p: start.neighbors()) 
	   {
		   if (!isVisited(p)) 
		   {
			   visit(p);
			   if (wordToCheck.startsWith(collected + board[p.x][p.y])) 
			   {
				   collected += board[p.x][p.y]; 
				   direction.add(p);
				   dfsForOnBoard(p.x, p.y, wordToCheck);
				   if (wordToCheck.equals(collected)) 
				   {
					   break;
				   }
				   else 
				   {
					   direction.remove(p);
					   int endIndex = collected.length() - board[p.x][p.y].length();
					   collected = collected.substring(0, endIndex);
				   }
			   }
		   }
	   }
	   allUnvisited();
	   pathVisited(); 
   }

   private void allUnvisited() 
   {
      visited = new boolean[row][column];
      for (boolean[] row : visited) 
      {
         Arrays.fill(row, false);
      }
   }
   
   private void pathVisited() 
   {
      for (int i = 0; i < direction.size(); i ++) 
      {
         visit(direction.get(i));
      }
   }
   private class Position 
   {
	   int x;
	   int y;
   
	   public Position(int x, int y) 
	   {
		   this.x = x;
		   this.y = y;
	   }
   
	   public Position[] neighbors() 
	   {
		   Position[] nbrs = new Position[MAX_NEIGHBORS];
		   int count = 0;
		   Position p;
		   for (int i = -1; i <= 1; i++) 
		   {
			   for (int j = -1; j <= 1; j++) 
			   {
				   if (!((i == 0) && (j == 0))) 
				   {
					   p = new Position(x + i, y + j);
					   if (isValid(p)) 
					   {
						   nbrs[count++] = p;
					   }
				   }
			   }
		   }
		   return Arrays.copyOf(nbrs, count);
	   }
   }

   private boolean isValid(Position p) 
   {
	   return (p.x >= 0) && (p.x < row) && (p.y >= 0) && (p.y < column);
   }

   private boolean isVisited(Position p) 
   {
	   return visited[p.x][p.y];
   }

   private void visit(Position p) 
   {
	   visited[p.x][p.y] = true;
   }
}