import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;

public class GameEngine implements WordSearchGame
{
	private TreeSet<String> tree = new TreeSet<>();
	private String[][] board;
	private boolean lexiconLoaded;
	private boolean[][] visited;
	private int row;
	private int column;
	private final int MAX_NEIGHBORS = 8;
	private int order;
	private String collected;
	private ArrayList<Integer> path;
	private ArrayList<Position> path2;
	
	public void loadLexicon(String fileName)
	{
		if (fileName == null)
		{
			throw new IllegalArgumentException();
		}
		
		File file = new File(fileName);
		try
		{
			Scanner scan = new Scanner(file);
			while (scan.hasNext())
			{
				tree.add(scan.next().toLowerCase());
			}
			scan.close();
		}
		
		catch (FileNotFoundException e)
		{
			throw new IllegalArgumentException();
		}
		
		lexiconLoaded = true;
	}

	public void setBoard(String[] letterArray) 
	{
		if (letterArray == null)
		{
			throw new IllegalArgumentException();
		}
		
		int count = 0;
		double num = Math.sqrt((double) letterArray.length);
		
		if (num == Math.round(num))
		{
			board = new String[(int) num][(int) num];
			for (int i = 0; i < num; i++)
			{
				for (int j = 0; j < num; j++)
				{
					board[i][j] = letterArray[count].toLowerCase();
					count++;
				}
			}
		}
		
		else
		{
			throw new IllegalArgumentException();
		}
	}

	public String getBoard() 
	{
		return Arrays.deepToString(board);
	}

	public SortedSet<String> getAllScorableWords(int minimumWordLength) 
	{
		if (minimumWordLength < 1)
		{
			throw new IllegalArgumentException();
		}
		
		if (!lexiconLoaded)
		{
			throw new IllegalStateException();
		}
		
		SortedSet<String> scoreWords = new TreeSet<>();
		
		return null;
	}

	public int getScoreForWords(SortedSet<String> words, int minimumWordLength) 
	{
		if (minimumWordLength < 1)
		{
			throw new IllegalArgumentException();
		}
		
		if (!lexiconLoaded)
		{
			throw new IllegalStateException();
		}
		
		int score = 0;
		Iterator<String> itr = words.iterator();
		while (itr.hasNext())
		{
			String word = itr.next();
			if (isValidWord(word) && word.length() == minimumWordLength)
			{
				score++;
			}
			
			else if (word.length() > minimumWordLength)
			{
				score = 1 + (word.length() - minimumWordLength);
			}
		}
		
		return score;
	}

	public boolean isValidWord(String wordToCheck) 
	{
		if (wordToCheck == null)
		{
			throw new IllegalArgumentException();
		}
		
		if (!lexiconLoaded)
		{
			throw new IllegalStateException();
		}
		
		if (tree.contains(wordToCheck.toLowerCase()))
		{
			return true;
		}
		
		else
		{
			return false;
		}
	}

	public boolean isValidPrefix(String prefixToCheck) 
	{
		if (prefixToCheck == null)
		{
			throw new IllegalArgumentException();
		}
		
		if (!lexiconLoaded)
		{
			throw new IllegalStateException();
		}
		
		String s = tree.ceiling(prefixToCheck.toLowerCase());
		if (s != null)
		{
			return s.startsWith(prefixToCheck);
		}
		
		return false;
	}

	public List<Integer> isOnBoard(String wordToCheck) 
	{
	      if (wordToCheck == null) 
	      {
	         throw new IllegalArgumentException();
	      }
	      if (tree == null) 
	      {
	         throw new IllegalStateException();
	      }
	      path2 = new ArrayList<Position>();
	      wordToCheck = wordToCheck.toUpperCase();
	      collected = "";
	      path = new ArrayList<Integer>();

	      for (int i = 0; i < column; i++) 
	      {
	         for (int j = 0; j < row; j ++) 
	         {
	            if (wordToCheck.equals(board[i][j])) 
	            {
	               path.add(i * row + j);
	               return path;
	            }
	            
	            if (wordToCheck.startsWith(board[i][j])) 
	            {
	               Position pos = new Position(i, j);
	               path2.add(pos);
	               collected = board[i][j];
	               dfs(i, j, wordToCheck); 
	               
	               if (!wordToCheck.equals(collected)) 
	               {
	                  path2.remove(pos);
	               }
	               else 
	               {
	                  for (Position p: path2) 
	                  {
	                     path.add((p.x * row) + p.y);
	                  } 
	                  return path;
	               }
	            }
	         }
	      }
	      return path;
	   }
	   
	   private void dfs(int x, int y, String wordToCheck) 
	   {
	      Position start = new Position(x, y);
	      markAllUnvisited(); 
	      markPathVisited(); 
	      for (Position p: start.neighbors()) 
	      {
	         if (!isVisited(p)) 
	         {
	            visit(p);
	            if (wordToCheck.startsWith(collected + board[p.x][p.y])) 
	            {
	               collected += board[p.x][p.y];
	               path2.add(p);
	               dfs(p.x, p.y, wordToCheck);
	               if (wordToCheck.equals(collected)) 
	               {
	                  return;
	               }
	               else 
	               {
	                  path2.remove(p);
	                  int endIndex = collected.length() - board[p.x][p.y].length();
	                  collected = collected.substring(0, endIndex);
	               }
	            }
	         }
	      }
	      markAllUnvisited(); 
	      markPathVisited(); 
	   }

	   private void markAllUnvisited() 
	   {
	      visited = new boolean[row][column];
	      for (boolean[] row : visited) 
	      {
	         Arrays.fill(row, false);
	      }
	   }
	   
	   private void markPathVisited() 
	   {
	      for (int i = 0; i < path2.size(); i ++) 
	      {
	         visit(path2.get(i));
	      }
	   }
	
	private class Position
	{
		int x, y;
		
		public Position(int x, int y)
		{
			this.x = x;
			this.y = y;
		}
		
		public Position[] neighbors()
		{
			Position[] nbrs = new Position[MAX_NEIGHBORS];
			int count = 0;
			Position p;
			
			for (int i = -1; i <= 1; i++)
			{
				for (int j = -1; i <= 1; i++)
				{
					if (!((i ==0) && (j == 0)))
					{
						p = new Position(x + i, y + j);
						if (isValid(p))
						{
							nbrs[count++] = p;
						}
					}
				}
			}
			
			return Arrays.copyOf(nbrs, count);
		}
	}
	
	private boolean isValid(Position p)
	{
		return (p.x >= 0) && (p.x < row) && (p.y >= 0) && (p.y < column);
	}
	
	private boolean isVisited(Position p)
	{
		return visited[p.x][p.y];
	}

	private void visit(Position p)
	{
		visited[p.x][p.y] = true;
	}
}
