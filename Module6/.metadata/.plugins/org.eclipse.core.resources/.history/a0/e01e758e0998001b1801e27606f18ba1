import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

import java.util.Arrays;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.TreeSet;

import java.util.stream.Collectors;

/**
 * Provides an implementation of the WordLadderGame interface. 
 *
 * @author Your Name (you@auburn.edu)
 */
public class Doublets implements WordLadderGame 
{

    // The word list used to validate words.
    // Must be instantiated and populated in the constructor.
    /////////////////////////////////////////////////////////////////////////////
    // DECLARE A FIELD NAMED lexicon HERE. THIS FIELD IS USED TO STORE ALL THE //
    // WORDS IN THE WORD LIST. YOU CAN CREATE YOUR OWN COLLECTION FOR THIS     //
    // PURPOSE OF YOU CAN USE ONE OF THE JCF COLLECTIONS. SUGGESTED CHOICES    //
    // ARE TreeSet (a red-black tree) OR HashSet (a closed addressed hash      //
    // table with chaining).
    /////////////////////////////////////////////////////////////////////////////
	
	TreeSet<String> lexicon = new TreeSet<>();

    /**
     * Instantiates a new instance of Doublets with the lexicon populated with
     * the strings in the provided InputStream. The InputStream can be formatted
     * in different ways as long as the first string on each line is a word to be
     * stored in the lexicon.
     */
    public Doublets(InputStream in) 
    {
        try 
        {
            lexicon = new TreeSet<String>();
            Scanner s = new Scanner(new BufferedReader(new InputStreamReader(in)));
            while (s.hasNext()) 
            {
                String str = s.next();
                lexicon.add(str);
                s.nextLine();
            }
            in.close();
        }
        catch (java.io.IOException e) 
        {
            System.err.println("Error reading from InputStream.");
            System.exit(1);
        }
    }

	public int getWordCount() 
	{
		return lexicon.size();
	}

	public boolean isWord(String str) 
	{
		if (lexicon.contains(str))
		{
			return true;
		}
		
		return false;
	}

	public int getHammingDistance(String str1, String str2) 
	{
		int d = 0;
		if (str1.length() != str2.length())
		{
			return -1;
		}
		
		else
		{
			for (int i = 0; i < str1.length(); i ++)
			{
				if (str1.charAt(i) != str2.charAt(2))
				{
					d++;
				}
			}
			return d;
		}
	}

	@Override
	public List<String> getNeighbors(String word) 
	{
		return null;
	}

	@Override
	public boolean isWordLadder(List<String> sequence) 
	{
		return false;
	}

	@Override
	public List<String> getMinLadder(String start, String end) 
	{
		return null;
	}


    //////////////////////////////////////////////////////////////
    // ADD IMPLEMENTATIONS FOR ALL WordLadderGame METHODS HERE  //
    //////////////////////////////////////////////////////////////

}
